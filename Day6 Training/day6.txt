<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

======================================


//Home.js


import React from 'react';
import { Link } from 'react-router-dom';

function Home() {
  return (
    <div>
      <h1>Welcome to Home Page</h1>
      <ul>
        <li><Link to="/user/1">User 1</Link></li>
        <li><Link to="/user/2">User 2</Link></li>
        <li><Link to="/user/3">User 3</Link></li>
      </ul>
    </div>
  );
}

export default Home;

//UserProfile.js

import React from 'react';
import { useParams } from 'react-router-dom';

function UserProfile() {
  let { userId } = useParams();

  return (
    <div>
      <h1>User Profile</h1>
      <p>User ID: {userId}</p>
    </div>
  );
}

export default UserProfile;


//App.js

import React from 'react';
import { BrowserRouter, Navigate, Route, Routes, Switch } from 'react-router-dom';
import Home from './components/Home';
import UserProfile from './components/UserProfile';

function App() {
  return (
    <BrowserRouter>
      <div>
        <Routes>
          <Route path="/" exact element={<Home />} />
          <Route path="/user/:userId" element={<UserProfile />} />
        </Routes>
      </div>
    </BrowserRouter>
  );
}

export default App;

===============================================
//Dynamic Routing 

//App.js

import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Home from './Home';
import Post from './Post';

function App() {
  return (
    <Router>
      <Routes>
        <Route exact path="/" element={<Home/>} />
        <Route exact path="/post/:id" element={<Post />} />
      </Routes>
    </Router>
  );
}

export default App;


//Post.js

import React from 'react';
import { useParams } from 'react-router-dom';

function Post() {
  const { id } = useParams();

  return (
    <div>
      <h1>Post {id}</h1>
      <p>This is the content of Post {id}.</p>
    </div>
  );
}

export default Post;

//Home.js

import React from 'react';
import { Link } from 'react-router-dom';

function Home() {
  return (
    <div>
      <h1>Home</h1>
      <ul>
        <li><Link to="/post/1">Post 1</Link></li>
        <li><Link to="/post/2">Post 2</Link></li>
        <li><Link to="/post/3">Post 3</Link></li>
      </ul>
    </div>
  );
}

export default Home;

====================================================
//Test cases using JEST

Test cases for button click
//Button.test.js

import React from 'react';
import {render,fireEvent} from '@testing-library/react'
import Button from './Button';
describe('Button Component',()=>{
    it('renders the button wiht correct label',()=>{
        const{getByTestId}=render(<Button label="Click me"/>);
        const buttonElement=getByTestId('button');
        expect(buttonElement).toBeInTheDocument();
        expect(buttonElement).toHaveTextContent('Click me');
    });
});

it('calls the onClick function when clicked',()=>{
    const onClickMock=jest.fn();
    const{getByTestId}=render(<Button label="Click me" onClick={onClickMock}/>);
    const buttonElement=getByTestId('button');
    fireEvent.click(buttonElement);
    expect(onClickMock).toHaveBeenCalledTimes(1);
});

//Button.js

import React from 'react';
 
const Button= ({ onClick, label = 'Click me' }) => {
  return (
    <button onClick={onClick} data-testid="button">
      {label}
    </button>
  );
};
 
export default Button;

======================================= npm run test

Test cases using state and props

//Counter.js

import React, { useState } from 'react';

const Counter = ({ initialCount }) => {
  const [count, setCount] = useState(initialCount);

  const increment = () => {
    setCount(count + 1);
  };

  const decrement = () => {
    setCount(count - 1);
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
    </div>
  );
};

export default Counter;

//Counter.test.js

import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import App from './App';

describe('Counter component', () => {
  // Test initial rendering with props
  it('renders with initial count', () => {
    const { getByText } = render(<App initialCount={5} />);
    expect(getByText('Count: 5')).toBeInTheDocument();
  });

  // Test increment functionality
  it('increments count on clicking increment button', () => {
    const { getByText } = render(<App initialCount={0} />);
    fireEvent.click(getByText('Increment'));
    expect(getByText('Count: 1')).toBeInTheDocument();
  });

  // Test decrement functionality
  it('decrements count on clicking decrement button', () => {
    const { getByText } = render(<App initialCount={3} />);
    fireEvent.click(getByText('Decrement'));
    expect(getByText('Count: 2')).toBeInTheDocument();
  });

  // Test combined increment and decrement
  it('increments and then decrements count', () => {
    const { getByText } = render(<App initialCount={10} />);
    fireEvent.click(getByText('Increment'));
    fireEvent.click(getByText('Decrement'));
    expect(getByText('Count: 10')).toBeInTheDocument();
  });

});  

=========================================================npm run test

//Test cases for react routing

//App.js

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Home from './Home';
import About from './About';

const App = () => {
  return (
    <Router>
    <Routes>
      <Route path='/' element={<Home />} />
      <Route path='/about' element={<About />} />
      
      </Routes>
    </Router>
  );
}

export default App;


//App.test.js




====================================================

useEffect hook

//Main.js

import React, { useState, useEffect } from 'react';

function MyComponent() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    // This code will run whenever the 'count' state changes
    document.title = `Count: ${count}`;
  }, [count]); // Dependency array

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

export default MyComponent;

================
function TodoComponent() {
    const [todo, setTodo] = useState({});
    const [loading, setLoading] = useState(true);
  
    useEffect(() => {
      // Fetch data using the API
      fetch('https://jsonplaceholder.typicode.com/todos/1')
        .then(response => response.json())
        .then(todo => {
          setTodo(data);
          setLoading(false);
        })
        .catch(error => {
          console.error('Error fetching data:', error);
          setLoading(false);
        });
    }, []); // Empty dependency array to ensure the effect runs only once
  
    return (
      <div>
        {loading ? (
          <p>Loading...</p>
        ) : (
          <div>
            <h1>Todo</h1>
            <p>ID: {todo.id}</p>
            <p>Title: {todo.title}</p>
            <p>Completed: {todo.completed ? 'Yes' : 'No'}</p>
          </div>
        )}
      </div>
    );
  }
  
  export default TodoComponent;

==========================================

import React, { useReducer } from 'react';

// Reducer function
const reducer = (state, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    case 'DECREMENT':
      return { count: state.count - 1 };
    default:
      return state;
  }
};

const Counter = () => {
  // Initial state
  const initialState = { count: 0 };

  // useReducer returns the current state and dispatch function
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>Decrement</button>
    </div>
  );
};

export default Counter;

=============================================
import React, { useRef, useEffect } from 'react';

function MyComponent() {
  // Creating a ref
  const inputRef = useRef(null);

  useEffect(() => {
    // Focus the input element when the component mounts
    inputRef.current.focus();
  }, []);

  return (
    <div>
      <input ref={inputRef} type="text" />
      <button onClick={() => console.log(inputRef.current.value)}>Log Value</button>
    </div>
  );
}

===============================================
useMemo() - performance optimisation 



