import React, { createContext, useContext, useState } from 'react';

//Step1 : Create a context -- is some kind of info that will be 
//stored by variable
const CounterContext= createContext()//Creating the context

//Step 2 : Create a provider

const CounterProvider = ({ children }) => {
  const [count,setCount]=useState(0);

  const increment = () => {
    setCount(prevCount => prevCount +1)
  };

  return(
    <CounterContext.Provider value={{ count, increment }}>
      {children}
    </CounterContext.Provider>
  )
};

//Step3 : Create a custom hook to consume the context

const useCounter= () => {
  const context = useContext(CounterContext);
  if(!context){
    throw new Error('useCounter must be used within a CounterProvider');

  }
  return context;
}

//Step4: Use the custom hook useCounter context in components
const CounterDisplay = () => {
  const {count }= useCounter();
  return <div>Count: {count}</div>;

};
const CounterControls = () => {
  const { increment }= useCounter();

  return <button onClick={increment}>Increment</button>;
}

//Step5:Wrap the components with the provider

const App = () => {
  return (
    <CounterProvider>
      <CounterDisplay />

      <CounterControls />

    </CounterProvider>
  )

}

export default App;

==============================================================

import React, { createContext, useContext, useState } from 'react';

//Step1 : Create a context -- is some kind of info that will be 
//stored by variable
const ThemeContext= createContext()//Creating the context

//Step 2 : Create a provider

const ThemeProvider = ({ children }) => {
  const [darkTheme,setdarkTheme]=useState(false);

  const toggleTheme = () => {
    setdarkTheme(prevTheme => !prevTheme);
  };

  return(
    <ThemeContext.Provider value={{ darkTheme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  )
};

//Step3 : Create a custom hook to consume the context

const useTheme= () => {
  const context = useContext(ThemeContext);
  if(!context){
    throw new Error('useTheme must be used within a ThemeProvider');

  }
  return context;
}

//Step4: Use the custom hook useCounter context in components
const ThemedButton = () => {
  const {darkTheme , toggleTheme }= useTheme();
  return(
    <button onClick={toggleTheme}>
      {darkTheme ? 'Switch to Light Theme' : 'Switch to Dark Theme'}

    </button>
  );

};
const ThemedContent = () => {
  const { darkTheme}= useTheme();

  return <div style= 
  {{background: darkTheme ? '#333' : '#fff', color: darkTheme ? '#fff': '#333'}}>
    Themed Content
  </div>
};

//Step5:Wrap the components with the provider

const App = () => {
  return (
    <ThemeProvider>
      <ThemedButton />

      <ThemedContent />

    </ThemeProvider>
  )

}

export default App;

=====================================================================

import React, { createContext, useContext, useState } from 'react';

// Creating contexts
const ThemeContext = createContext();
const UserContext = createContext();

// Provider components
const ThemeProvider = ({ children }) => {
    const [theme, setTheme] = useState('light');
  
    return (
      <ThemeContext.Provider value={{ theme, setTheme }}>
        {children}
      </ThemeContext.Provider>
    );
  };

  const UserProvider = ({ children }) => {
    const [user, setUser] = useState(null);
  
    return (
      <UserContext.Provider value={{ user, setUser }}>
        {children}
      </UserContext.Provider>
    );
  };
// Custom hooks to consume the contexts
const useTheme = () => useContext(ThemeContext);
const useUser = () => useContext(UserContext);

// Example usage
const UserInfo = () => {
    const { user } = useUser();
    return <div>User: {user}</div>;
  };



  const App = () => {
    const { theme, setTheme } = useTheme();
    const { setUser } = useUser();
  
    const toggleTheme = () => {
      setTheme(theme === 'light' ? 'dark' : 'light');
    };
  
    const login = () => {
      setUser('John');
    };
return (
      <div className={theme}>
        <button onClick={toggleTheme}>Toggle Theme</button>
        <button onClick={login}>Login</button>
        <UserInfo />
      </div>
    );
  };


  export default function Main() {
    return (
      <ThemeProvider>
        <UserProvider>
          <App />
        </UserProvider>
      </ThemeProvider>
    );
  }

======================================================================================

//Redux Setup

const { createStore } = require('redux');

//Reducer Function

const counterReducer = (state = {count : 0}, action ) => {

  switch (action.type) {
    case 'INCREMENT':
      return {count: state.count+1};

    case 'DECREMENT':
      return {count: state.count-1};

    default:
      return state;
  }


}

//Create Redux Store
const store = createStore(counterReducer); 

//Subscribe to state changes
store.subscribe(()=> {
  console.log('Current state: ',store.getState());
});

//Dispatch Actions

store.dispatch({ type: 'INCREMENT' });
store.dispatch({ type: 'INCREMENT' });
store.dispatch({ type: 'DECREMENT' });

=========================================================

Redux thunk ex1
//Notepad given in app.js but add in 
//Counter.js 

import React from 'react';
import { connect } from 'react-redux';
import { increment, decrement, incrementAsync } from './actions';

const Counter = ({ counter, increment, decrement, incrementAsync }) => {
  return (
    <div>
      <h1>Counter: {counter}</h1>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
      <button onClick={incrementAsync}>Increment Async</button>
    </div>
  );
};

const mapStateToProps = state => ({
  counter: state.counter
});

const mapDispatchToProps = {
  increment,
  decrement,
  incrementAsync
};

export default connect(mapStateToProps, mapDispatchToProps)(Counter);

====================================================================

Redux thunk async

//action.js

export const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';
export const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';
export const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';

export const fetchDataRequest = () => ({
  type: FETCH_DATA_REQUEST,
});

export const fetchDataSuccess = (data) => ({
  type: FETCH_DATA_SUCCESS,
  payload: data,
});

export const fetchDataFailure = (error) => ({
  type: FETCH_DATA_FAILURE,
  payload: error,
});

//App.js

import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchData } from './actions';

const App = () => {
  const dispatch = useDispatch();
  const { loading, data, error } = useSelector((state) => state);

  useEffect(() => {
    dispatch(fetchData());
  }, [dispatch]);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div>
      <h1>Data fetched from JSONPlaceholder API</h1>
      <ul>
        {data.map((item) => (
          <li key={item.id}>{item.title}</li>
        ))}
      </ul>
    </div>
  );
};

export default App;