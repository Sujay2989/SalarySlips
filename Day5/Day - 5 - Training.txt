https://forms.office.com/r/EbrRDPJpSL

Example of State Management :

import React, { Component } from 'react';

class MyComponent extends Component {
    constructor(props) {
        super(props);
        this.state = {
            counter: 0
        };
    }

    render() {
        return (
            <div>
                <p>Counter: {this.state.counter}</p>
                <button onClick={() => this.setState({ counter: this.state.counter + 1 })}>
                    Increment
                </button>
            </div>
        );
    }
}

export default MyComponent;


2.  import React, { useState } from 'react';

function MyComponent() {
    const [counter, setCounter] = useState(0);

    return (
        <div>
            <p>Counter: {`${counter}`}</p>
            <button onClick={() => setCounter(counter + 1)}>
                Increment
            </button>
        </div>
    );
}

export default MyComponent;


3.  import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}


4. function ParentComponent() {
  const [value, setValue] = useState(0);

  return <ChildComponent value={value} />;
}

function ChildComponent(props) {
  return <p>Value: {props.value}</p>;
}


Example of Context API:


import React, { createContext, useContext, useState } from 'react';

// Step 1: Create a context
const CounterContext = createContext();

// Step 2: Create a provider
const CounterProvider = ({ children }) => {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(prevCount => prevCount + 1);
  };

  return (
    <CounterContext.Provider value={{ count, increment }}>
      {children}
    </CounterContext.Provider>
  );
};

// Step 3: Create a custom hook to consume the context
const useCounter = () => {
  const context = useContext(CounterContext);
  if (!context) {
    throw new Error('useCounter must be used within a CounterProvider');
  }
  return context;
};

// Step 4: Use the context in components
const CounterDisplay = () => {
  const { count } = useCounter();

  return <div>Count: {count}</div>;
};

const CounterControls = () => {
  const { increment } = useCounter();

  return <button onClick={increment}>Increment</button>;
};

// Step 5: Wrap the components with the provider
const App = () => {
  return (
    <CounterProvider>
      <CounterDisplay />
      <CounterControls />
    </CounterProvider>
  );
};

export default App;


Example 2: Theme Toggler Application


import React, { createContext, useContext, useState } from 'react';

// Step 1: Create a context
const ThemeContext = createContext();

// Step 2: Create a provider
const ThemeProvider = ({ children }) => {
  const [darkTheme, setDarkTheme] = useState(false);

  const toggleTheme = () => {
    setDarkTheme(prevTheme => !prevTheme);
  };

  return (
    <ThemeContext.Provider value={{ darkTheme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// Step 3: Create a custom hook to consume the context
const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

// Step 4: Use the context in components
const ThemedButton = () => {
  const { darkTheme, toggleTheme } = useTheme();

  return (
    <button onClick={toggleTheme}>
      {darkTheme ? 'Switch to Light Theme' : 'Switch to Dark Theme'}
    </button>
  );
};

const ThemedContent = () => {
  const { darkTheme } = useTheme();

  return <div style={{ background: darkTheme ? '#333' : '#fff', color: darkTheme ? '#fff' : '#333' }}>Themed Content</div>;
};

// Step 5: Wrap the components with the provider
const App = () => {
  return (
    <ThemeProvider>
      <ThemedButton />
      <ThemedContent />
    </ThemeProvider>
  );
};

export default App;


Example 3: Nested Contexts


import React, { createContext, useContext, useState } from 'react';

// Creating contexts
const ThemeContext = createContext();
const UserContext = createContext();

// Provider components
const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
};

// Custom hooks to consume the contexts
const useTheme = () => useContext(ThemeContext);
const useUser = () => useContext(UserContext);

// Example usage
const UserInfo = () => {
  const { user } = useUser();
  return <div>User: {user}</div>;
};

const App = () => {
  const { theme, setTheme } = useTheme();
  const { setUser } = useUser();

  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  const login = () => {
    setUser('John');
  };

  return (
    <div className={theme}>
      <button onClick={toggleTheme}>Toggle Theme</button>
      <button onClick={login}>Login</button>
      <UserInfo />
    </div>
  );
};

export default function Main() {
  return (
    <ThemeProvider>
      <UserProvider>
        <App />
      </UserProvider>
    </ThemeProvider>
  );
}






Mutable vs immutable state in react:

import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}

export default Counter;


In this example, count is mutable because we can modify it directly using setCount.




import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(prevCount => prevCount + 1); // Using functional update
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}

export default Counter;


In this example, even though setCount is used, the new state is computed based on the previous state (prevCount) rather than directly modifying it. This ensures immutability.




Simple Example of Redux without React:

// Redux setup
const { createStore } = require('redux');

// Reducer function
const counterReducer = (state = { count: 0 }, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    case 'DECREMENT':
      return { count: state.count - 1 };
    default:
      return state;
  }
};

// Create Redux store
const store = createStore(counterReducer);

// Subscribe to state changes
store.subscribe(() => {
  console.log('Current state:', store.getState());
});

// Dispatch actions
store.dispatch({ type: 'INCREMENT' });
store.dispatch({ type: 'INCREMENT' });
store.dispatch({ type: 'DECREMENT' });


To run this script type node App.js




Redux Example :

// counterActions.js
export const increment = () => {
  return {
    type: 'INCREMENT'
  };
};

export const decrement = () => {
  return {
    type: 'DECREMENT'
  };
};


// counterReducer.js
const initialState = {
  count: 0
};

const counterReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + 1 };
    case 'DECREMENT':
      return { ...state, count: state.count - 1 };
    default:
      return state;
  }
};

export default counterReducer;


// store.js
import { createStore } from 'redux';
import counterReducer from './counterReducer';

const store = createStore(counterReducer);

export default store;


// Counter.js
import React from 'react';
import { connect } from 'react-redux';
import { increment, decrement } from './counterActions';

const Counter = ({ count, increment, decrement }) => {
  return (
    <div>
      <h1>Counter App</h1>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
    </div>
  );
};

const mapStateToProps = state => {
  return {
    count: state.count
  };
};

export default connect(mapStateToProps, { increment, decrement })(Counter);


// App.js
import React from 'react';
import { Provider } from 'react-redux';
import Counter from './Counter';
import store from './store';

const App = () => {
  return (
    <Provider store={store}>
      <div>
        <Counter />
      </div>
    </Provider>
  );
};

export default App;






// actions.js
export const INCREMENT = 'INCREMENT';
export const DECREMENT = 'DECREMENT';

export const increment = () => ({
  type: INCREMENT
});

export const decrement = () => ({
  type: DECREMENT
});




// reducer.js
import { INCREMENT, DECREMENT } from '../actions/actions'

const initialState = {
  count: 0
};

const counterReducer = (state = initialState, action) => {
  switch (action.type) {
    case INCREMENT:
      return {
        ...state,
        count: state.count + 1
      };
    case DECREMENT:
      return {
        ...state,
        count: state.count - 1
      };
    default:
      return state;
  }
};

export default counterReducer;




// store.js
import { createStore } from 'redux';
import counterReducer from '../reducers/reducer'

const store = createStore(counterReducer);

export default store;




// Counter.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement } from './actions/actions'

const Counter = () => {
  const count = useSelector(state => state.count);
  const dispatch = useDispatch();

  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => dispatch(increment())}>Increment</button>
      <button onClick={() => dispatch(decrement())}>Decrement</button>
    </div>
  );
};

export default Counter;




Example of Create reducer and actions in redux using redux-toolkit:


// counterSlice.js
import { createSlice } from '@reduxjs/toolkit';

const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    value: 0,
  },
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;




// rootReducer.js
import { combineReducers } from '@reduxjs/toolkit';
import counterReducer from './counterSlice';
// import other reducers if any

const rootReducer = combineReducers({
  counter: counterReducer,
  // other reducers...
});

export default rootReducer;




// store.js
import { configureStore } from '@reduxjs/toolkit';
import rootReducer from './rootReducer';

const store = configureStore({
  reducer: rootReducer,
  // other configurations...
});

export default store;





import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { increment, decrement, incrementByAmount } from './counterSlice';

function CounterComponent() {
  const dispatch = useDispatch();
  const counter = useSelector((state) => state.counter.value);

  return (
    <div>
      <div>Counter: {counter}</div>
      <button onClick={() => dispatch(increment())}>Increment</button>
      <button onClick={() => dispatch(decrement())}>Decrement</button>
      <button onClick={() => dispatch(incrementByAmount(5))}>Increment by 5</button>
    </div>
  );
}

export default CounterComponent;





Example of redux-thunk:

npm install redux-thunk 
// store.js

import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import rootReducer from './reducers';

const store = createStore(rootReducer, applyMiddleware(thunk));

export default store;



// reducers.js

const initialState = {
  counter: 0
};

const rootReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return {
        ...state,
        counter: state.counter + 1
      };
    case 'DECREMENT':
      return {
        ...state,
        counter: state.counter - 1
      };
    default:
      return state;
  }
};

export default rootReducer;




// actions.js

export const increment = () => ({
  type: 'INCREMENT'
});

export const decrement = () => ({
  type: 'DECREMENT'
});

// Asynchronous action creator using Redux Thunk
export const incrementAsync = () => {
  return dispatch => {
    setTimeout(() => {
      dispatch(increment());
    }, 1000);
  };
};



// App.js

import React from 'react';
import { connect } from 'react-redux';
import { increment, decrement, incrementAsync } from './actions';

const Counter = ({ counter, increment, decrement, incrementAsync }) => {
  return (
    <div>
      <h1>Counter: {counter}</h1>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
      <button onClick={incrementAsync}>Increment Async</button>
    </div>
  );
};

const mapStateToProps = state => ({
  counter: state.counter
});

const mapDispatchToProps = {
  increment,
  decrement,
  incrementAsync
};

export default connect(mapStateToProps, mapDispatchToProps)(Counter);




import React from 'react';
import { Provider } from 'react-redux';
import Counter from './Counter';
import store from './store';

const App = () => {
  return (
    <Provider store={store}>
      <div>
        <Counter />
      </div>
    </Provider>
  );
};

export default App;



Perform asynchronous operations using redux thunk:


// actions.js
export const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';
export const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';
export const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';

export const fetchDataRequest = () => ({
  type: FETCH_DATA_REQUEST,
});

export const fetchDataSuccess = (data) => ({
  type: FETCH_DATA_SUCCESS,
  payload: data,
});

export const fetchDataFailure = (error) => ({
  type: FETCH_DATA_FAILURE,
  payload: error,
});

export const fetchData = () => {
  return async (dispatch) => {
    dispatch(fetchDataRequest());
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/posts');
      if (!response.ok) {
        throw new Error('Failed to fetch data');
      }
      const data = await response.json();
      dispatch(fetchDataSuccess(data));
    } catch (error) {
      dispatch(fetchDataFailure(error.message));
    }
  };
};




// reducer.js
import { FETCH_DATA_REQUEST, FETCH_DATA_SUCCESS, FETCH_DATA_FAILURE } from './actions';

const initialState = {
  loading: false,
  data: [],
  error: '',
};

const reducer = (state = initialState, action) => {
  switch (action.type) {
    case FETCH_DATA_REQUEST:
      return {
        ...state,
        loading: true,
      };
    case FETCH_DATA_SUCCESS:
      return {
        ...state,
        loading: false,
        data: action.payload,
        error: '',
      };
    case FETCH_DATA_FAILURE:
      return {
        ...state,
        loading: false,
        data: [],
        error: action.payload,
      };
    default:
      return state;
  }
};

export default reducer;




// store.js
import { createStore, applyMiddleware } from 'redux';
import {thunk} from 'redux-thunk';
import reducer from './reducer';

const store = createStore(reducer, applyMiddleware(thunk));

export default store;



// App.js
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchData } from './actions';

const App = () => {
  const dispatch = useDispatch();
  const { loading, data, error } = useSelector((state) => state);

  useEffect(() => {
    dispatch(fetchData());
  }, [dispatch]);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div>
      <h1>Data fetched from JSONPlaceholder API</h1>
      <ul>
        {data.map((item) => (
          <li key={item.id}>{item.title}</li>
        ))}
      </ul>
    </div>
  );
};

export default App;




import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import { Provider } from 'react-redux';
import store from './store';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}>
    <App />
  </Provider>,
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();




CRUD operations using redux and axios (using json-server):


npm install axios json-server

npm install json-server -g


create db.json in root directory

// db.json
{
  "posts": []
}



json-server --watch db.json --port 5000





// src/actions/types.js
export const FETCH_POSTS = 'FETCH_POSTS';
export const CREATE_POST = 'CREATE_POST';
export const DELETE_POST = 'DELETE_POST';



// src/actions/postActions.js
import axios from 'axios';
import { FETCH_POSTS, CREATE_POST, DELETE_POST } from './types';

const API_URL = 'http://localhost:5000/posts';

export const fetchPosts = () => async (dispatch) => {
  const response = await axios.get(API_URL);
  dispatch({ type: FETCH_POSTS, payload: response.data });
};

export const createPost = (postData) => async (dispatch) => {
  const response = await axios.post(API_URL, postData);
  dispatch({ type: CREATE_POST, payload: response.data });
};

export const deletePost = (postId) => async (dispatch) => {
  await axios.delete(`${API_URL}/${postId}`);
  dispatch({ type: DELETE_POST, payload: postId });
};




// src/reducers/postReducer.js
import { FETCH_POSTS, CREATE_POST, DELETE_POST } from '../actions/types';

const initialState = {
  posts: []
};

export default function (state = initialState, action) {
  switch (action.type) {
    case FETCH_POSTS:
      return {
        ...state,
        posts: action.payload
      };
    case CREATE_POST:
      return {
        ...state,
        posts: [...state.posts, action.payload]
      };
    case DELETE_POST:
      return {
        ...state,
        posts: state.posts.filter(post => post.id !== action.payload)
      };
    default:
      return state;
  }
}




// src/reducers/index.js
import { combineReducers } from 'redux';
import postReducer from './postReducer';

export default combineReducers({
  posts: postReducer
});




// src/store.js
import { createStore, applyMiddleware, compose } from 'redux';
import {thunk} from 'redux-thunk';
import rootReducer from './reducers';

const initialState = {};

const middleware = [thunk];

const store = createStore(
  rootReducer,
  initialState,
  compose(
    applyMiddleware(...middleware),
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
  )
);

export default store;




// src/components/PostForm.js
import React, { useState } from 'react';
import { connect } from 'react-redux';
import { createPost } from '../actions/postActions';

const PostForm = ({ createPost }) => {
  const [title, setTitle] = useState('');

  const onSubmit = (e) => {
    e.preventDefault();
    createPost({ title });
    setTitle('');
  };

  return (
    <div>
      <h2>Add Post</h2>
      <form onSubmit={onSubmit}>
        <div>
          <label>Title:</label>
          <br />
          <input type="text" name="title" value={title} onChange={(e) => setTitle(e.target.value)} />
        </div>
        <br />
        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

export default connect(null, { createPost })(PostForm);




// src/components/PostList.js
import React, { useEffect } from 'react';
import { connect } from 'react-redux';
import { fetchPosts, deletePost } from '../actions/postActions';

const PostList = ({ fetchPosts, deletePost, posts }) => {
  useEffect(() => {
    fetchPosts();
  }, [fetchPosts]);

  return (
    <div>
      <h2>Posts</h2>
      <ul>
        {posts.map(post => (
          <li key={post.id}>
            {post.title}{' '}
            <button onClick={() => deletePost(post.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

const mapStateToProps = state => ({
  posts: state.posts.posts
});

export default connect(mapStateToProps, { fetchPosts, deletePost })(PostList);




// src/App.js
import React from 'react';
import { Provider } from 'react-redux';
import store from './store';
import PostForm from './components/PostForm';
import PostList from './components/PostList';

function App() {
  return (
    <Provider store={store}>
      <div className="App">
        <PostForm />
        <hr />
        <PostList />
      </div>
    </Provider>
  );
}

export default App;


===========================

//Fetch data using axios library

//App.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const App = () => {
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await axios.get('https://jsonplaceholder.typicode.com/posts');
        setPosts(response.data);
      } catch (error) {
        console.error('Error fetching posts:', error);
      }
    };

    fetchPosts();
  }, []);

  return (
    <div>
      <h1>Posts</h1>
      <ul>
        {posts.map(post => (
          <li key={post.id}>
            <h2>{post.title}</h2>
            <p>{post.body}</p>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default App;





